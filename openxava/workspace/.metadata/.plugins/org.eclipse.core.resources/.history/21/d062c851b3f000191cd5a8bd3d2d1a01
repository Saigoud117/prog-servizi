package ProgBien;

import java.math.*;

import javax.persistence.*;
import javax.persistence.Entity;

import org.hibernate.annotations.*;
import org.hibernate.envers.*;
import org.openxava.annotations.*;

import Calculators.*;
import ProgBien.Enumerators.*;

@Entity
@Views({
@View(members="procedura; descrizionevoce; tipologia; capitolo; pdc; importonetto; aliquotaiva; importoIvaCalculated; totaleCalculated; percentualeA1; percentualeA2; percentualeA3; ")})
@Audited
public class QuadroEconomico implements java.io.Serializable  {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@ReferenceView("Simple")
	@ManyToOne // Lazy fetching produces a fails on removing a detail from invoice
	private Procedure procedura;		

	@Id
    @Hidden // The property is not shown to the user. It's an internal identifier
    @GeneratedValue(generator="system-uuid") // Universally Unique Identifier (1)
    @GenericGenerator(name="system-uuid", strategy = "uuid")
    @Column(length=32)
    private String oid;
	
	@Required
    @Column(name = "DescrizioneVoce", length = 256, nullable = false)
    private String descrizionevoce;
	
	@Required
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne( // The reference is persisted as a database relationship
        fetch=FetchType.LAZY, // The reference is loaded on demand
        optional=true) // The reference can have no value
    @DescriptionsList(
    		descriptionProperties="key, descrizione",
    		condition="e.gruppicodici = 'C'") // Thus the reference is displayed using a combo
    private CodiciIct tipologia; // A regular Java reference

	@Column(name = "Capitolo", length = 14, nullable = true)
	private String capitolo;
	
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne( // The reference is persisted as a database relationship
        fetch=FetchType.LAZY, // The reference is loaded on demand
        optional=true) // The reference can have no value
	@ReferenceView("Simple")
    private Pdc pdc; // A regular Java reference
	
	@Required
	@Stereotype("MONEY")
    @Column(name = "ImportoNetto", length = 16, precision = 12)
    private BigDecimal importonetto;
	
	/*
	@Required
	@org.hibernate.annotations.Type(type="org.openxava.types.EnumLetterType",
    	    parameters={
        		@org.hibernate.annotations.Parameter(name="letters", value="SN")
        		,@org.hibernate.annotations.Parameter(name="enumType", value="ProgBien.Enumerators$Base")
    	    }
    	)
    private Base base;
	*/
	
	@Column(name = "AliquotaIva", length = 5, precision = 2, nullable = true)
    private BigDecimal aliquotaiva;
	
	@Stereotype("MONEY")
	@Hidden
    private BigDecimal importoiva;
	
	@Stereotype("MONEY")
	@Hidden
    private BigDecimal amount;
	
	@Stereotype("MONEY")
    @Depends("importonetto, aliquotaiva")
    public BigDecimal getImportoIvaCalculated() {
    	
		if (aliquotaiva == null)
			return new BigDecimal("0");
		else
			return importonetto.multiply(aliquotaiva).multiply(BigDecimal.valueOf(0.01)).setScale(2, RoundingMode.UP);
    }

	@Stereotype("MONEY")
	@Depends("importonetto, aliquotaiva")  // When the user changes product or quantity
	public BigDecimal getTotaleCalculated() {
		if (aliquotaiva == null)
			return importonetto;
		else
		{
			BigDecimal importoiva = getImportoIvaCalculated();
			return importonetto.add(importoiva);
		}
	}
	
    @Column(name = "PercentualeA1", length = 5, precision = 3, nullable = true)
    private BigDecimal percentualeA1;
    
    @Column(name = "PercentualeA2", length = 5, precision = 3, nullable = true)
    private BigDecimal percentualeA2;
    
    @Column(name = "PercentualeA3", length = 5, precision = 3, nullable = true)
    private BigDecimal percentualeA3;
	
	public void saveTotali() throws Exception {
		BigDecimal tot = getTotaleCalculated();
		BigDecimal ivaTot = getImportoIvaCalculated();
	    
		setAmount(tot);
		setImportoiva(ivaTot);
	}
	
	@PrePersist
	@PreUpdate
	private void syncTotali() throws Exception { 
		saveTotali();
	}	

	public String getOid() {
		return oid;
	}

	public void setOid(String oid) {
		this.oid = oid;
	}

	public String getDescrizionevoce() {
		return descrizionevoce;
	}

	public void setDescrizionevoce(String descrizionevoce) {
		this.descrizionevoce = descrizionevoce;
	}	

	public CodiciIct getTipologia() {
		return tipologia;
	}

	public void setTipologia(CodiciIct tipologia) {
		this.tipologia = tipologia;
	}

	public String getCapitolo() {
		return capitolo;
	}

	public void setCapitolo(String capitolo) {
		this.capitolo = capitolo;
	}	

	public Pdc getPdc() {
		return pdc;
	}

	public void setPdc(Pdc pdc) {
		this.pdc = pdc;
	}

	public BigDecimal getImportonetto() {
		return importonetto;
	}

	public void setImportonetto(BigDecimal importonetto) {
		this.importonetto = importonetto;
	}	

	/*
	public Base getBase() {
		return base;
	}

	public void setBase(Base base) {
		this.base = base;
	}
	*/

	public BigDecimal getAliquotaiva() {
		return aliquotaiva;
	}

	public void setAliquotaiva(BigDecimal aliquotaiva) {
		this.aliquotaiva = aliquotaiva;
	}	

	public BigDecimal getImportoiva() {
		return importoiva;
	}

	public void setImportoiva(BigDecimal importoiva) {
		this.importoiva = importoiva;
	}	

	public BigDecimal getAmount() {
		return amount;
	}

	public void setAmount(BigDecimal amount) {
		this.amount = amount;
	}
	
	public Procedure getProcedura() {
		return procedura;
	}

	public void setProcedura(Procedure procedura) {
		this.procedura = procedura;
	}

	public BigDecimal getPercentualeA1() {
		return percentualeA1;
	}

	public void setPercentualeA1(BigDecimal percentualeA1) {
		this.percentualeA1 = percentualeA1;
	}

	public BigDecimal getPercentualeA2() {
		return percentualeA2;
	}

	public void setPercentualeA2(BigDecimal percentualeA2) {
		this.percentualeA2 = percentualeA2;
	}

	public BigDecimal getPercentualeA3() {
		return percentualeA3;
	}

	public void setPercentualeA3(BigDecimal percentualeA3) {
		this.percentualeA3 = percentualeA3;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}
	
}
