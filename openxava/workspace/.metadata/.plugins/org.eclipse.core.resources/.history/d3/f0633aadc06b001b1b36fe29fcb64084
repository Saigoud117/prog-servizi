package ProgBien;

import java.math.*;

import javax.persistence.*;

import org.openxava.annotations.*;
import org.openxava.jpa.*;

import Calculators.*;

@Embeddable
public class Gdl113Embeddable {
	
	@ReferenceView("Simple")
	@ManyToOne // Lazy fetching produces a fails on removing a detail from invoice
	private Gdl113 gdl;
		
	@Required
	@ManyToOne( // The reference is persisted as a database relationship
        fetch=FetchType.LAZY, // The reference is loaded on demand
        optional=true) // The reference can have no value
    @DescriptionsList(
		descriptionProperties="key, descrizione",
		condition="e.gruppicodici = 'O'"
    ) // Thus the reference is displayed using a combo
    private CodiciIct fase; // A regular Java reference
	    
	@Required
	@ManyToOne( // The reference is persisted as a database relationship
        fetch=FetchType.LAZY, // The reference is loaded on demand
        optional=true) // The reference can have no value
    @DescriptionsList(
		descriptionProperties="key, descrizione, coefficiente",
		depends="fase",
		condition="e.gruppicodici in (select c.tipo2 from CodiciIct c where c.key = ?)") // Thus the reference is displayed using a combo
    private CodiciIct ruolo; // A regular Java reference

    @ManyToOne( // The reference is persisted as a database relationship
        fetch=FetchType.LAZY, // The reference is loaded on demand
        optional=true) // The reference can have no value
    @DescriptionsList(descriptionProperties="cf, nome, cognome") // Thus the reference is displayed using a combo
    private Dipendenti dipendenti; // A regular Java reference
    
    @Hidden
    @Stereotype("MONEY")
    @Column(name = "Totale", length = 16, precision = 12, nullable = true)
    private BigDecimal amount;
    
    @Required
    @Column(name = "Percentuale", length = 5, precision = 3, nullable = false)
    @DefaultValueCalculator(GdlPercentageCalculator.class)
    private BigDecimal percentuale;
	
	@Stereotype("MONEY")
	@Depends("fase.key, ruolo.key, percentuale")  // When the user changes product or quantity
	public BigDecimal getTotaleCalculated(Procedure procedure) {
		if (procedure == null || fase == null || ruolo == null)
			return null;
		
		EntityManager em = XPersistence.createManager();
		CodiciIct r = (CodiciIct) em.createQuery(
		        "select c from CodiciIct c where c.key = :key")  // JPQL query (1)
		    .setParameter("key", ruolo.getKey())
		    .getSingleResult();  // To obtain one single entity (2)
		em.close(); // You have to close the manager
					
		BigDecimal coefficiente = r.getCoefficiente().multiply(BigDecimal.valueOf(0.01));
		
		BigDecimal percent = percentuale.multiply(BigDecimal.valueOf(0.01));
			
		if (percent != null)
		{
			if (fase.getKey().equals("O1P"))
				return procedure.getGdl113Program().multiply(coefficiente).multiply(percent).setScale(2, RoundingMode.UP);
			else if (fase.getKey().equals("O2Q"))
				return procedure.getGdl113Affida().multiply(coefficiente).multiply(percent).setScale(2, RoundingMode.UP);
			else if (fase.getKey().equals("O3R"))
				return procedure.getGdl113Exec().multiply(coefficiente).multiply(percent).setScale(2, RoundingMode.UP);
			else
				return coefficiente;
		}
		else
			return new BigDecimal(0);
	}
	
	/*
	public void saveTotali(Procedure procedure) {
		BigDecimal tot = getTotaleCalculated(procedure);
		if (tot == null)
			tot = new BigDecimal(2);
		setAmount(tot);
	}
	*/

	public CodiciIct getFase() {
		return fase;
	}

	public void setFase(CodiciIct fase) {
		this.fase = fase;
	}

	public CodiciIct getRuolo() {
		return ruolo;
	}

	public void setRuolo(CodiciIct ruolo) {
		this.ruolo = ruolo;
	}

	public Dipendenti getDipendenti() {
		return dipendenti;
	}

	public void setDipendenti(Dipendenti dipendenti) {
		this.dipendenti = dipendenti;
	}
		

	public BigDecimal getPercentuale() {
		return percentuale;
	}

	public void setPercentuale(BigDecimal percentuale) {
		this.percentuale = percentuale;
	}

	public BigDecimal getAmount() {
		return amount;
	}

	public void setAmount(BigDecimal amount) {
		this.amount = amount;
	}	
	
}
